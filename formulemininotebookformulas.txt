public double error = 1000000000000000000000;

public double mult(double a, double b)
{
return a*b;
}

public double add(double a, double b)
{
return a+b;
}

public double dif(double a, double b)
{
return a-b;
}


public double  v(double i, double r)
{
return mult(i,r);
}

public double div(double a, double b)
{
if(a!=0){
return a/b;
}
else if(a==0)
{
return error;
}
else if(b==0)
{
return a;
}
}

public double i(double v, double r)
{
return div(v,r)
}

public double r(double v, double i)
{
return div(v,i);
}

public double p(double i, double v)
{
return mult(i,v);
}

public double p2(double i, double r)
{
return mult(Math.Pow(i,2),r);
}

public double arrayop(List<double> x , string op)
{
double counter=0;
	for(int i = 0 ; i < x.Count;i++)
	{
		if(op=="mult" || "*")
		{
			if(counter==0){counter = 1;}
			counter*=x[i];			
		}		
		else if(op=="add" || "+")
		{
			counter+=x[i];			
		}
		else if(op=="div" || "/")
		{
			counter=div(counter,x[i]);			
		}
		else if(op=="dif" || "-")
		{
			counter=dif(counter,x[i]);			
		}
		else
		{
			return error;
		}	
	}
return counter;
}

public double rtserie(List<double> vals)
{
	return arrayop(vals,"+");

}

public double rparalel(double r1, double r2)
{
	return ((r1*r2)/(r1+r2));
}

public double 1r(double r)
{
	return 1/r;
}
public List<double> modif1r(List<double> vals)
{
	List<double> 1r = new List<double>();	
	for(int i = 0 ; i < vals.Count;i++)
	{
		1i[i] = 1r(vlas[i]);
	}
	return ir;
}

//rtp = 1/(suma(1/ri))
public double rparaleln(List<double> vals)
{
	return 1/(arrayop(modif1r(vals),"+"))		
}


public double vdiv(double vin, double r1, double r2)
{
	return mult(vin,div(r2/(add(r1,r2))));
}

public double vac(double i , double z)
{
	return mult(i,z);
}
public double iac(double e, double z)
{
	return div(e,z);
}
public double zac(double e, double i)
{
	return div(e,i);
}
public double pac(double e, double i, double cosfi)
{
	return mult(e,mult(z,cosfi));
}

//ctserie = 1/(suma(1/ci))
public double cparaleln(List<double> vals)
{
	return 1/(arrayop(modif1r(vals),"+"))		
}

public double cserie(double c1, double c2)
{
	return mult(c1,c2)/add(c1,c2);
}


public double ctparalel(List<double> vals)
{
	return arrayop(vals,"+");

}

//pagina 10




