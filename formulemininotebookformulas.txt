public double error = 1000000000000000000000;
public string errorMessage = "error";
public double mult(double a, double b)
{
if(a==0 || b==0){System.Console.WriteLine("errorMessage"+"a==0 or b==0");}
return a*b;
}

public double add(double a, double b)
{
return a+b;
}

public double dif(double a, double b)
{
return a-b;
}
public double difabs(double a, double b)
{
if(a>b){return a-b;}
else if(b>a){return b-a;}
else {return 0;}
}

public double  v(double i, double r)
{
return mult(i,r);
}

public double div(double a, double b)
{
if(a!=0){
return a/b;
}
else if(a==0)
{
return error;
}
else if(b==0)
{
return a;
}
}

public double i(double v, double r)
{
return div(v,r)
}

public double r(double v, double i)
{
return div(v,i);
}

public double p(double i, double v)
{
return mult(i,v);
}

public double p2(double i, double r)
{
return mult(Math.Pow(i,2),r);
}

public double arrayop(List<double> x , string op)
{
double counter=0;
	for(int i = 0 ; i < x.Count;i++)
	{
		if(op=="mult" || "*")
		{
			if(counter==0){counter = 1;}
			counter*=x[i];			
		}		
		else if(op=="add" || "+")
		{
			counter+=x[i];			
		}
		else if(op=="div" || "/")
		{
			counter=div(counter,x[i]);			
		}
		else if(op=="dif" || "-")
		{
			counter=dif(counter,x[i]);			
		}
		else
		{
			return error;
		}	
	}
return counter;
}

public double rtserie(List<double> vals)
{
	return arrayop(vals,"+");

}

public double rparalelb(double r1, double r2)
{
	return div(mult(r1,r2),mult(r1,r2));
}

public double rparalela(double r1, double r2)
{
	return ((r1*r2)/(r1+r2));
}

public double 1r(double r)
{
	return 1/r;
}
public List<double> modif1r(List<double> vals)
{
	List<double> 1r = new List<double>();	
	for(int i = 0 ; i < vals.Count;i++)
	{
		1i[i] = 1r(vlas[i]);
	}
	return ir;
}

//rtp = 1/(suma(1/ri))
public double rparaleln(List<double> vals)
{
	return 1/(arrayop(modif1r(vals),"+"))		
}


public double vdiv(double vin, double r1, double r2)
{
	return mult(vin,div(r2/(add(r1,r2))));
}

public double vac(double i , double z)
{
	return mult(i,z);
}
public double iac(double e, double z)
{
	return div(e,z);
}
public double zac(double e, double i)
{
	return div(e,i);
}
public double pac(double e, double i, double cosfi)
{
	return mult(e,mult(z,cosfi));
}

//ctserie = 1/(suma(1/ci))
public double cparaleln(List<double> vals)
{
	return 1/(arrayop(modif1r(vals),"+"))		
}

public double cserie(double c1, double c2)
{
	return mult(c1,c2)/add(c1,c2);
}


public double ctparalel(List<double> vals)
{
	return arrayop(vals,"+");

}

public bool isPositive(double x)
{
	if(x>0){return true;}
	else if(x<0){return false;}
	else {return false;}
}

public bool isNegative(double x)
{
	if(x<0){return true;}
	else if(x>0){return false;}
	else {return false;}
}

public bool isZero(double x)
{
	if(x==0){return true;}
	else {return false;}
}

public double changeSign(double x, string s)
{
	if(s=="+" && isPositive(x)==true){return x;}		
	else if(s=="+" && isPositive(x)==false){return x*(-1);}
	else if(s=="-" && isNegative(x)==true){return x;}
	else if(s=="-" && isNegative(x)==false){return x*(-1);}
	else {return error;}
}

public bool isError(double x)
{
	if(x==error){return true;}
	else {return false;}
}

public bool isEqual(double a, double b)
{
	if(a==b){return true;}
	else{return false;}
}

public bool isNotEqual(double a, double b)
{
	if(a==b){return false;}
	else{return true;}
}

public bool isAproximativelyEqual(double a, double b, double marje)
{
	if(Math.Abs(a-b)<marje){return true;}
	else{return false;}
}

public bool isGraterThan(double a, double b)
{
	if(a>b){return true;}
	else {return false;
}

public bool isEqualorGraterThan(double a, double b)
{
	if(a>b || a==b){return true;}
	else {return false;
}

public bool isLessThan(double a, double b)
{
	if(a<b){return true;}
	else {return false;
}

public bool isEqualorLessThan(double a, double b)
{
	if(a<b || a==b){return true;}
	else {return false;
}

public bool reciprocal1pern(double x)
{
	return 1/x;
}

public double squareroot(double x)
{
	return Math.Sqrt(x);
}

//(a/b)^x
public double expabx(double a, double b, double x)
{
	return Math.Pow(div(a,b),x);
}
//a^x/b^x
public double expabx2(double a, double b, double x)
{
	return div(Math.Pow(a,x),Math.Pow(b,x));
}
//a^x/a^y
public double expaaxy(double a, double x, double y)
{
	return div(Math.Pow(a,x),Math.Pow(a,y));
}
//a^x-y
public double expaxy(double a, double x, double y)
{
	return Math.Pow((a),dif(x,y));
}
//a^-x
public double expaminx(double a, double x)
{
	return Math.Pow(a,x);
}
//1/a^x
public double expaminx2(double a, double x)
{
	return div(1,Math.Pow(a,x));
}

//(a^x)*(a^y)
public double expaxmultay(double a, double x,double y)
{
	return mult(Math.Pow(a,x),Math.Pow(a,y));
}
//a^x+y
public double expapowxplusy(double a, double x,double y)
{
	return Math.Pow(a,x+y);
}
//a^x^y
public double expapowxpowy(double a, double x,double y)
{
	return Math.Pow(a,Math.Pow(x,y);
}
//a^x*y
public double expapowxy(double a, double x,double y)
{
	return Math.Pow(a,mult(x,y));
}
//a^x/y
public double expapowxpery(double a, double x,double y)
{
	return Math.Pow(a,div(x,y));
}

//ordin y sqrt a^x 
public double sqrt2yofapowx(double a, double x,double y)
{
	return Math.Sqrt(Math.Pow(a,x));
}

//db = 10 log(p2/p1)
public double db2valueP(double p2, double p1)
{
	return mult(10,Math.Log(div(p2,p1)));
}

//dbuin = 10 log(v2/v1)
public double db2valueVin(double v2, double v1)
{
	return mult(20,Math.Log(div(v2,v1)));
}

//dbiin = 10 log(i2/i1)
public double db2valueIin(double i2, double i1)
{
	return mult(20,Math.Log(div(p2,p1)));
}







